class ShamirSecretSharing {
    constructor() {
        this.testcases = [];
    }

    // Convert a number from any base to decimal
    convertFromBase(num, base) {
        try {
            if (base <= 10) {
                return parseInt(num, base);
            }
            
            const digits = '0123456789abcdef';
            let val = BigInt(0);
            num = num.toString().toLowerCase();
            
            for (let i = 0; i < num.length; i++) {
                const digitValue = digits.indexOf(num[i]);
                if (digitValue === -1 || digitValue >= base) {
                    throw new Error(Invalid digit '${num[i]}' for base ${base});
                }
                val = val * BigInt(base) + BigInt(digitValue);
            }
            
            return val;
        } catch (error) {
            throw new Error(Error converting number ${num} from base ${base}: ${error.message});
        }
    }

    // Perform Lagrange interpolation to find the constant term
    lagrangeInterpolation(points) {
        try {
            const k = points.length;
            let secret = BigInt(0);
            
            for (let i = 0; i < k; i++) {
                let numerator = BigInt(points[i].y);
                let denominator = BigInt(1);
                
                for (let j = 0; j < k; j++) {
                    if (i !== j) {
                        numerator = numerator * BigInt(-points[j].x);
                        denominator = denominator * BigInt(points[i].x - points[j].x);
                    }
                }
                
                secret = secret + numerator / denominator;
            }
            
            return secret >= 0 ? secret : -secret;
        } catch (error) {
            throw new Error(Error in Lagrange interpolation: ${error.message});
        }
    }

    // Process a single test case
    processTestCase(testCase) {
        try {
            const k = testCase.keys.k;
            const points = [];
            
            // Validate input
            if (!k || k <= 0) {
                throw new Error('Invalid k value');
            }
            
            // Convert points to (x,y) format
            let count = 0;
            for (let i = 1; count < k; i++) {
                if (testCase[i]) {
                    const x = i;
                    const base = parseInt(testCase[i].base);
                    const encodedY = testCase[i].value;
                    
                    // Validate base
                    if (base < 2 || base > 16) {
                        throw new Error(Invalid base ${base} for point ${i});
                    }
                    
                    const y = this.convertFromBase(encodedY, base);
                    points.push({ x, y: Number(y) });
                    count++;
                }
            }
            
            if (points.length < k) {
                throw new Error(Insufficient points: needed ${k}, got ${points.length});
            }
            
            return this.lagrangeInterpolation(points);
        } catch (error) {
            throw new Error(Error processing test case: ${error.message});
        }
    }

    // Main execution method
    execute(testCases) {
        try {
            // Process each test case
            testCases.forEach((testCase, index) => {
                try {
                    const secret = this.processTestCase(testCase);
                    console.log(Secret for Test Case ${index + 1}: ${secret.toString()});
                } catch (error) {
                    console.error(Error in test case ${index + 1}: ${error.message});
                }
            });
        } catch (error) {
            console.error('Fatal error:', error.message);
            process.exit(1);
        }
    }
}

// Define test cases directly
const testCase1 = {
    "keys": {
        "n": 4,
        "k": 3
    },
    "1": {
        "base": "10",
        "value": "4"
    },
    "2": {
        "base": "2",
        "value": "111"
    },
    "3": {
        "base": "10",
        "value": "12"
    },
    "6": {
        "base": "4",
        "value": "213"
    }
};

const testCase2 = {
    "keys": {
        "n": 10,
        "k": 7
    },
    "1": {
        "base": "6",
        "value": "13444211440455345511"
    },
    "2": {
        "base": "15",
        "value": "aed7015a346d63"
    },
    "3": {
        "base": "15",
        "value": "6aeeb69631c227c"
    },
    "4": {
        "base": "16",
        "value": "e1b5e05623d881f"
    },
    "5": {
        "base": "8",
        "value": "316034514573652620673"
    },
    "6": {
        "base": "3",
        "value": "2122212201122002221120200210011020220200"
    },
    "7": {
        "base": "3",
        "value": "20120221122211000100210021102001201112121"
    },
    "8": {
        "base": "6",
        "value": "20220554335330240002224253"
    },
    "9": {
        "base": "12",
        "value": "45153788322a1255483"
    },
    "10": {
        "base": "7",
        "value": "1101613130313526312514143"
    }
};

// Run the program with both test cases
const shamirSolver = new ShamirSecretSharing();
shamirSolver.execute([testCase1, testCase2]);
